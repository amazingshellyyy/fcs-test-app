{"version":3,"sources":["DropZone.js","App.js","index.js"],"names":["FCS","require","MyDropzone","onDrop","useCallback","acceptedFiles","console","log","forEach","file","reader","FileReader","onabort","onerror","onload","binaryStr","result","buffer","Buffer","from","FCSfile","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","isDragActive","App","className","DropZone","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKAEMA,EAAMC,EAAQ,IAuCLC,IAtCf,WACE,IAAMC,EAASC,uBAAY,SAAAC,GAEzBC,QAAQC,IAAI,gBAAiBF,GAC7BA,EAAcG,SAAQ,SAACC,GACrB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMN,QAAQC,IAAI,6BACnCG,EAAOG,QAAU,kBAAMP,QAAQC,IAAI,4BACnCG,EAAOI,OAAS,WAEdR,QAAQC,IAAI,SAAUG,GAEtB,IAAMK,EAAYL,EAAOM,OACzBV,QAAQC,IAAI,YAAaQ,GACzB,IAAME,EAASC,EAAOC,KAAKJ,EAAW,UACtCT,QAAQC,IAAI,SAAUU,GACtB,IAAMG,EAAU,IAAIpB,EAAI,GAAIiB,GAC5BX,QAAQC,IAAI,UAAWa,IAEzBd,QAAQC,IAAI,OAAQE,GACpBC,EAAOW,kBAAkBZ,QAE1B,IAvBiB,EAwBgCa,YAAY,CAACnB,WAA1DoB,EAxBa,EAwBbA,aAAcC,EAxBD,EAwBCA,cAAeC,EAxBhB,EAwBgBA,aAEpC,OACE,gDAASF,KAAT,cACE,qCAAWC,MAETC,EACE,wDACA,+F,iNCxBKC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,OCDN3B,EAAQ,IAER4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b8738e8f.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nconst FCS = require('fcs')\nfunction MyDropzone() {\n  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n    console.log('acceptedFiles', acceptedFiles)\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader()\n\n      reader.onabort = () => console.log('file reading was aborted')\n      reader.onerror = () => console.log('file reading has failed')\n      reader.onload = () => {\n      // Do whatever you want with the file contents\n        console.log('reader', reader)\n        // arrayBuffer\n        const binaryStr = reader.result\n        console.log('binaryStr', binaryStr)\n        const buffer = Buffer.from(binaryStr, 'binary')\n        console.log('buffer', buffer)\n        const FCSfile = new FCS({}, buffer)\n        console.log('FCSfile', FCSfile)\n      }\n      console.log('file', file)\n      reader.readAsArrayBuffer(file)\n    })\n  }, [])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>Drop the files here ...</p> :\n          <p>Drag 'n' drop some files here, or click to select files</p>\n      }\n    </div>\n  )\n}\n\nexport default MyDropzone\n","import './App.css';\nimport DropZone from './DropZone'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DropZone/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nrequire('es6-promise')\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}